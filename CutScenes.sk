#
#	Changelog:
#		- Added fancy rendering progress bar
#
#


options:
	error: &8(&c*&8)
	success: &8(&a*&8)
	warning: &8(&e*&8)

	# This option decides how fast a scene will render, the higher the number, the faster it will render.
	# The lower, the slower. 
	# To disable this feature completely, set it to -1 (will lag your server A LOT if its a big scene)

	render_speed: 10

	# In case shit goes wrong you can I guess enable this to see what is happening :shrug: (this is mainly for the rendering part)
	debug: false

#============( Command handling )=========

command /cutscenes [<string>] [<string>] [<string>] [<string>]:
	aliases: /cuts
	trigger:
		if player doesn't have permission "cutscenes.command":
			message "{@error} &7You do not have the required permission to do this."
			stop
		
		else if arg 1 = "create":
			if arg 2 is not set:
				message "{@error} &7Please give the new cutscene a name."
				stop
			
			set {_id} to getID(5)
			set {cutscenes::scenes::%{_id}%::name} to arg 2
			add {_id} to {cutscenes::ids::*}

			message "{@success} &7Successfully created a new cutscene named &a%arg-2% &7with id &a%{_id}%"
			stop

		else if arg 1 = "delete":
			if arg 2 is not set:
				message "{@error} &7Please give a valid id of a cutscene to delete."
				stop
			
			set {_id} to arg 2

			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if {cutscenes::ids::*} doesn't contain {_id}:
				message "{@error} &7This cutscene does not exist."
				stop
			
			remove {_id} from {cutscenes::ids::*}
			delete {cutscenes::scenes::%{_id}%::*}
			message "{@success} &7Deleted the cutscene with id &a%{_id}%"
			stop
		
		else if arg 1 = "list":
			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7No cutscenes have been created"
				stop
			
			message "&7==========(&f CutScenes &7)=========="
			message "&f"
			loop {cutscenes::ids::*}:
				set {_name} to {cutscenes::scenes::%loop-value%::name}
				send "&f%loop-index%. &a%loop-value% > %{_name}%  <cmd:/cutscenes edit %loop-value%><ttp:&7Click to edit &b%loop-value%>&3[CLICK]"
			message "&e"
			message "&7==========(&f CutScenes &7)=========="
		
		else if arg 1 = "edit":
			if arg 2 is not set:
				message "{@error} &7Please specify a cutscene to edit."
				stop
			
			set {_id} to arg 2
			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if {cutscenes::ids::*} doesn't contain {_id}:
				message "{@error} &7This cutscene does not exist."
				stop
			
			sendInteraction(player, {_id})
		
		else if arg 1 = "render":
			if arg 2 is not set:
				message "{@error} &7Please specify a cutscene to start."
				stop
			
			set {_id} to arg 2
			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if {cutscenes::ids::*} doesn't contain {_id}:
				message "{@error} &7This cutscene does not exist."
				stop
		
			if {-cutscenes::scene::%{_id}%::isRendering} = true:
				message "{@error} &7This cutscene is already being rendered currently!"
				stop
			message "{@warning} &7Starting rendering (this may lag the server a bit)"
			set {-cutscenes::player::%{_id}%::startedRendering} to now
			set {-cutscenes::scene::%{_id}%::issuedRender} to player
			set {-cutscenes::scene::%{_id}%::isRendering} to true
			
			renderPath({_id})

		else if arg 1 = "start":
			if arg 2 is not set:
				message "{@error} &7Please specify a cutscene to start."
				stop
			
			set {_id} to arg 2
			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if {cutscenes::ids::*} doesn't contain {_id}:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if size of {cutscenes::scene::%{_id}%::path::*} < 1:
				if {-cutscenes::scene::%{_id}%::isRendering} = true:
					message "{@error} &7This cutscene is already being rendered currently!" to {-cutscenes::scene::%{_id}%::issuedRender}
					stop
				message "{@warning} &7Rendering the path. This may take quite some time depending on the render speed you configured."
				set {-cutscenes::scene::%{_id}%::isRendering} to true
				set {-cutscenes::player::%{_id}%::startedRendering} to now
				set {-cutscenes::scene::%{_id}%::issuedRender} to player

				renderPath({_id})
			startCutscene({_id}, player)
		
		else if arg 1 = "setspeed":
			if arg 2 is not set:
				message "{@error} &7Please specify a cutscene to start."
				stop
			
			set {_id} to arg 2
			if size of {cutscenes::ids::*} < 1:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if {cutscenes::ids::*} doesn't contain {_id}:
				message "{@error} &7This cutscene does not exist."
				stop
			
			if arg 3 is not set:
				message "{@error} &7Please specify a speed for the cutscene to run at!"
				stop
			
			if arg 3 parsed as an integer is not set:
				message "{@error} &7Please specify a &cvalid &7speed for the cutscene to run at!"
				stop
			
			set {_s} to arg 3 parsed as an integer
			
			set {cutscenes::scene::%{_id}%::speed} to {_s}
			message "{@success} &7Changed the speed of the cutscene to &a%{_s}%"
		
		else if arg 1 = "admin":
			set {_id} to arg 3
			sendInteraction(player, {_id})
			if arg 2 = "clearall":
				if arg 4 = "confirm":
					delete {cutscenes::scenes::%{_id}%::controlpoints::*}	
					message "{@success} &7Deleted all control points"
					stop
				
				message "&c&l&m---------&c&l( &4&lWARNING &c&l)&c&l&m---------"
				message "&f"
				message "&7Are you sure you want to delete &c&lALL &7keypoints? <cmd:/cutscenes admin clearall %{_id}% confirm><ttp:&aYes im sure>&a&l[YES]"
				message "&f&c"
				message "&c&l&m---------&c&l( &4&lWARNING &c&l)&c&l&m---------"
				stop	

			else if arg 2 = "addkeyframe":
				add player's location to {cutscenes::scenes::%{_id}%::controlpoints::*}	
				message "{@success} &7Added your location to the control points of &a%{_id}%"
				if {-cutscenes::players::%player's uuid%::isViewing} is set:
					loop {cutscenes::scenes::%{_id}%::controlpoints::*}:
						set {_l} to loop-value
						set {_b} to block at {_l}
						make player see {_b} as red wool

				


			else if arg 2 = "viewcontrolpoints":

				if {-cutscenes::players::%player's uuid%::isViewing} is set:
					loop {cutscenes::scenes::%{_id}%::controlpoints::*}:
						set {_l} to loop-value
						set {_b} to block at {_l}
						make player see {_b} as {_b}
					
					delete {-cutscenes::players::%player's uuid%::isViewing}
					message "{@success} &7Stopped viewing control points"
					

				else:
					loop {cutscenes::scenes::%{_id}%::controlpoints::*}:
						set {_l} to loop-value
						set {_b} to block at {_l}
						make player see {_b} as red wool
					
					set {-cutscenes::players::%player's uuid%::isViewing} to true
					message "{@success} &7Now viewing control points locations"
					
	
		else if arg 1 = "help":

			message "&7==========(&f CutScenes &7)=========="
			message "&f"
			message "&e/cutscenes create <name> &f| &7Create a scene"
			message "&e/cutscenes delete <id> &f| &7Delete a scene"
			message "&e/cutscenes edit <id> &f| &7Edit a scene"
			message "&e/cutscenes start <id> &f| &7Start a scene"
			message "&e/cutscenes setspeed <id> <integer> &f| &7set the speed of a scene"
			message "&e/cutscenes render <id> &f| &7Render a scene"
			message "&r"
			message "&7==========(&f CutScenes &7)=========="
		
		else:
			message "{@error} &7Unkown command. Type &c/cutscenes help &7for a list of all commands"


function sendInteraction(P: player, id: string):

	message "&7==========(&f CutScenes &7)==========" to {_P}
	message "&f" to {_P}
	message "&eAdd control point    <cmd:/cutscenes admin addkeyframe %{_id}%><ttp:&7Click to add a new control point>&3[CLICK]" to {_P}
	message "&eDelete all control points    <cmd:/cutscenes admin clearall %{_id}%><ttp:&7Click to delete all control points>&3[CLICK]" to {_P}
	message "&eToggle viewing of keypoints    <cmd:/cutscenes admin viewcontrolpoints %{_id}%><ttp:&7Click to toggle this>&3[CLICK]" to {_P}
	message "&a" to {_P}
	message "&7==========(&f CutScenes &7)==========" to {_P}
	


#============( CutScene handling )=========

function renderPath(id: string):

	#
	#	Spline function but shorter
	#
	set {_locs::*} to {cutscenes::scenes::%{_id}%::controlpoints::*}
	set {_subs} to 1000

	set {_loopAmount} to 0
	if size of {_locs::*} >= 4:	
		set {_sub} to 1 / {_subs}
		set {_world} to world of {_locs::1}
		set {_s} to size of {_locs::*} - 2

		set {_TotalFrames} to ((size of {_locs::*} - 3) * {_subs}) + (size of {_locs::*} - 3)
		set {_percentages} to round({_TotalFrames} / 10)
		set {_currPercentage} to 0
		send "{@warning} &7Rendering a total of &a%{_totalFrames}% &7frames" to {-cutscenes::scene::%{_id}%::issuedRender}

		loop {_locs::*}:
			loop-index parsed as a number is between 2 and {_s}
			add 1 to {_i}
			set {_1} to {_i}th element of {_locs::*}
			set {_2} to ({_i} + 1)th element of {_locs::*}
			set {_3} to ({_i} + 2)th element of {_locs::*}
			set {_4} to ({_i} + 3)th element of {_locs::*}
			set {_t} to 0
			loop ({_subs} + 1) times:
				add 1 to {_loopAmount}
				if {@debug} = true:
					send "Rendering frame %{_loopAmount}% / %{_TotalFrames}%" to {-cutscenes::scene::%{_id}%::issuedRender}
				set {_x} to catmull("%x-loc of {_1}%" parsed as a number, "%x-loc of {_2}%" parsed as a number, "%x-loc of {_3}%" parsed as a number, "%x-loc of {_4}%" parsed as a number, {_t})
				set {_y} to catmull("%y-loc of {_1}%" parsed as a number, "%y-loc of {_2}%" parsed as a number, "%y-loc of {_3}%" parsed as a number, "%y-loc of {_4}%" parsed as a number, {_t})
				set {_z} to catmull("%z-loc of {_1}%" parsed as a number, "%z-loc of {_2}%" parsed as a number, "%z-loc of {_3}%" parsed as a number, "%z-loc of {_4}%" parsed as a number, {_t})

				add {_sub} to {_t}
				set {_loc} to location at {_x}, {_y}, {_z} in world {_world}
				add {_loc} to {_locations::*}
				if {_loopAmount} mod {@render_speed} = 0:
					wait 3 ticks
				
				set {_percent} to {_loopAmount} / {_totalFrames}
				set {_apercent} to {_percent} * 100
				set {_percent} to floor({_percent} * 10)


				set {_str} to stringBuilder("█", 10, {_percent})
				send an action bar from "&3Rendering progress: %{_str}% &7(%{_apercent}%%%)" to {-cutscenes::scene::%{_id}%::issuedRender}


				if {_loopAmount} mod {_percentages} = 0:
					add 10 to {_currPercentage}
					message "{@warning} &7The cutscene is currently &a%{_currPercentage}%%% &7done rendering." to {-cutscenes::scene::%{_id}%::issuedRender}
				
	set {_next} to 2

	#
	# Apply direction
	#
	set {_points::*} to {_locations::*}
	loop {_points::*}:
		set yaw of {_points::%loop-index%} to vector yaw of vector from loop-value to {_points::%{_next}%}
		set pitch of {_points::%loop-index%} to vector pitch of vector from loop-value to {_points::%{_next}%}
		add 1 to {_next}
	
	set {cutscenes::scene::%{_id}%::path::*} to {_points::*}
	set {_then} to {-cutscenes::player::%{_id}%::startedRendering}
	set {_diff} to difference between {_then} and now
	message "{@success} &7Successfully rendered the scene. &c(It took %{_diff}%)" to {-cutscenes::scene::%{_id}%::issuedRender}
	delete {-cutscenes::scene::%{_id}%::isRendering}

function startCutscene(id: string, player: player):
	if {-cutscenes::player::%{_Player}%::inScene} is set:
		message "{@error} &7You are already in a cutscene." to {_player}
		stop
	#
	# Get the frames
	#
	set {_points::*} to {cutscenes::scene::%{_id}%::path::*}

	# 
	# Save some parameters for user convenience
	#
	set {_oldGamemode} to {_player}'s gamemode
	set {_oldLocation} to {_player}'s location
	set {_player}'s gamemode to spectator

	set {_P} to {_player}
	set {-cutscenes::player::%{_Player}%::inScene} to true


	#
	# Start the scene
	#
	set {_cooldown} to {cutscenes::scene::%{_id}%::speed}
	loop {_points::*}:
		if {-cutscenes::player::%{_player}%::exitScene} is set:
			delete {-cutscenes::player::%{_player}%::exitScene}
			stop
		teleport {_player} to loop-value
		set {_int} to loop-index parsed as an integer
		if {_int} mod {_cooldown} = 0:
			wait 1 tick
		
	set gamemode of {_player} to {_oldGamemode}
	teleport {_player} to {_oldLocation}
	delete {-cutscenes::player::%{_Player}%::inScene}




#============( Curves functions )===========( Thank you Gigi for helping me with this lol )===============

function catmull(p0: number, p1: number, p2: number, p3: number, t: number) :: number:

	set {_1} to (2 * {_p1})
	set {_2} to ({_p0} *-1 + {_p2}) * {_t}
	set {_3} to (2 * {_p0} - 5 * {_p1} + 4 * {_p2} - {_p3}) * ({_t}^2)
	set {_4} to ({_p0} *-1 + 3 * {_p1} - 3 * {_p2} + {_p3}) * ({_t}^3)
	return ( {_1} + {_2} + {_3} + {_4} )/2

#============( Random functions )==========

function getID(length: integer) :: string:
	set {_str} to "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
	set {_split::*} to {_str} split at ""
	
	set {_end} to ""
	loop {_length} times:
		set {_new} to random element out of {_split::*}
		set {_end} to "%{_end}%%{_new}%"
	
	return {_end}

function stringBuilder(symbol: string, amount: integer, placement: integer) :: string:
	
	loop ({_amount}) times:
		if {_placement} >= loop-number:
			if {_str} is not set:
				set {_str} to "&a%{_symbol}%"
			else:
				set {_str} to "%{_str}%&a%{_symbol}%"
		else:
			if {_str} is not set:
				set {_str} to "&c%{_symbol}%"
			else:
				set {_str} to "%{_str}%&c%{_symbol}%"
	

        
	return {_str}
